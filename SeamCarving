package modelisation;

import java.io.*;
import static java.lang.Math.min;
import static java.sql.Types.NULL;
import java.util.*;
public class SeamCarving
{

    public static int[][] img;
    public static int[][] res;
    public static int[][] itr;
    public static int[][] flotsmin; 
    //HashMap<Integer, Integer> flotsmin; 
    public static int[] pere;
    public static int[] prof;
    public static int minf;
    public static ArrayList<Integer> parcours;
    public static ArrayList<Integer> imgv;
    
    public static int[][] readpgm(String fn)
	{
        try {
            InputStream f = ClassLoader.getSystemClassLoader().getResourceAsStream(fn);
            System.out.println(f);
            BufferedReader d = new BufferedReader(new InputStreamReader(f));
            String magic = d.readLine();
            String line = d.readLine();
		   while (line.startsWith("#")) {
			  line = d.readLine();
		   }
		   Scanner s = new Scanner(line);
		   int width = s.nextInt();
		   int height = s.nextInt();
		   line = d.readLine();
		   s = new Scanner(line);
		   int maxVal = s.nextInt();
		   int[][] im = new int[height][width];
		   s = new Scanner(d);
		   int count = 0;
		   while (count < height*width) {
			  im[count / width][count % width] = s.nextInt();
			  count++;
		   }
		   return im;
        }

        catch(Throwable t) {
            t.printStackTrace(System.err) ;
            return null;
        }
    }

    public static int writepgm(int[][] image, String filename) {

		File fichier = new File(filename);

		try {
			FileOutputStream fos = new FileOutputStream(fichier);
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		Writer ecriture = null;
		try {
			ecriture = new OutputStreamWriter(new FileOutputStream(fichier));
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		try {
			try {
				int cpt = 0;
				ecriture.append("P2\n"); 
				ecriture.append(""+image[0].length); // largeur 
				ecriture.append(" "+image.length + "\n");  // hauteur
                                ecriture.append("255\n");
				for(int i = 0; i < image.length; i++){    
				  for(int j = 0; j < image[0].length; j++){
					  
					  ecriture.append(image[i][j]+" ");
					  cpt = cpt+1;
					  if(cpt == 0%26){
						  ecriture.append("\n");
					  }
					  
				  }

				}
				
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} finally {
			try {
				ecriture.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return 0;
	}

    
    
    public static int[][] interest(int[][] image){
        itr = new int[image.length][image[0].length];
        for ( int i = 0 ; i < image.length ; i++){
            for ( int j = 0 ; j < image[0].length ; j++){
                if(j==0){
                    itr[i][j]=Math.abs(image[i][j]-image[i][j+1]);
                }
                else if(j==image[0].length-1){
                    itr[i][j]=Math.abs(image[i][j]-image[i][j-1]);
                }
                else{
                    itr[i][j]=Math.abs(image[i][j]-(image[i][j-1]+image[i][j+1])/2);
                }
            }
        }
        System.out.println(itr[0][0]+"  "+itr[0][1]+"  "+itr[0][2]+"  "+itr[0][3]);
        System.out.println(itr[1][0]+"  "+itr[1][1]+"  "+itr[1][2]+"  "+itr[1][3]);
        System.out.println(itr[2][0]+"  "+itr[2][1]+"  "+itr[2][2]+"  "+itr[2][3]);
        return itr;
    }
    
    public static Graph tograph(int[][] itr){
        int l = itr[0].length; // largeur du tableau d'interet
        int h = itr.length; // hauteur du tableau d'interet
        Graph g = new Graph(h*l+2);
        for ( int i = 0 ; i < h ; i++){
            for ( int j = 0 ; j < l ; j++){               
                if(j==0){
                    g.addEdge(new Edge(0, h*j+i+1, (int)Double.POSITIVE_INFINITY, 0)); //ajouter arete de capacite+infini entre source (0) et pixel
                    g.addEdge(new Edge(h*j+i+1, h*(j+1)+i+1, itr[i][j], 0)); //ajouter arete de capacite interet du pixel entre pixel et pixel de droite
                }
                else if(j==itr[0].length-1){
                    g.addEdge(new Edge(h*j+i+1, h*l+1, itr[i][j], 0)); //ajouter arete de capacite interet du pixel entre pixel et destination 
                }
                else{   
                    g.addEdge(new Edge(h*j+i+1, h*(j+1)+i+1, itr[i][j], 0)); //ajouter arete de capacite interet du pixel entre pixel et pixel de droite
                    g.addEdge(new Edge(h*j+i+1, h*(j-1)+i+1, (int)Double.POSITIVE_INFINITY, 0)); //ajouter arete de capacite +infini entre pixel et pixel de gauche
                    if(i!=0){
                        g.addEdge(new Edge(h*j+i+1, h*(j-1)+(i-1)+1, (int)Double.POSITIVE_INFINITY, 0)); //ajouter arete de capacite +infini entre pixel et pixel du haut-gauche
                    }
                    if(i!=h-1){
                        g.addEdge(new Edge(h*j+i+1, h*(j-1)+(i+1)+1, (int)Double.POSITIVE_INFINITY, 0)); //ajouter arete de capacite +infini entre pixel et pixel du bas-gauche
                    }  
                }
                
            }
        }
        return g;
    }
    
    public static int flotDepart(Graph g){
        int h = itr.length; // recuperation de la hauteur de l'image
        int l = itr[0].length; // recuperation de la longueur de l'image
        int[] flotsminligne; 
        
        flotsminligne = new int[h]; // tableau de longueur h contenant la capacité min de chaque ligne du graphe
        flotsmin = new int[h*l+2][h*l+2]; // capacités utilisee des aretes allant de h à l ;
        //flotsmin = new HashMap<Integer, Integer>;
        for ( int j = 0 ; j < h ; j++){ // initialisation du tableau à +infini
            flotsminligne[j] = (int)Double.POSITIVE_INFINITY;
        }
        
        for(int i=0 ; i<h ; i++){ //ligne i
            for(int k = 0 ; k<l ; k++){ // colonne k
                flotsminligne[i] = min(flotsminligne[i], itr[i][k]);
                
            }
            for(int k = 0 ; k<l-1 ; k++){ // colonne k
                flotsmin[((i+1)+(k*h))][(i+1)+((k+1)*h)]= flotsminligne[i];
            }  
        }
        
        int flotdep = 0;
        for ( int x = 0 ; x < h ; x++){ // somme des capacité min de chaque ligne
            flotdep = flotdep + flotsminligne[x];
        }
        return flotdep;
    }
    
    public static Graph gResiduel(Graph g){
        for(int i = 0 ; i < itr.length ; i++){
            for(int j = 0 ; j < itr[0].length ; j++){
                for(Edge e : g.adj((i+1)+(j*itr.length))){                    
                    if ((e.from == (i+1)+(j*itr.length))){
                        e.used = flotsmin[e.from][e.to];                        
                    }                    
                    else if(e.from == 0){
                        e.used = flotsmin[e.to][(e.to)+itr.length];
                    }
                    else if( e.to == (i+1)+(j*itr.length)){
                        e.used = flotsmin[e.from][e.to];
                    }
                    
                    if (e.to == (itr.length*itr[0].length)+1){
                        e.used = flotsmin[(e.from)-itr.length][e.from];
                    }
                    
                }
            }
        }
        return g;
    }
    
    public static void parcoursLargeur(Graph g){
        Stack coupe = new Stack() ;
        
        minf = (int)Double.POSITIVE_INFINITY;       
        int[] marque = new int[g.vertices()];
        int s = 0;
        pere = new int[g.vertices()];
        prof = new int[g.vertices()];
        int t = (itr.length*itr[0].length)+1;
        boolean trouve = false;
        LinkedList<Integer> l = new LinkedList<Integer>();
        l.offer(s);
        marque[s] = 1;//marquer s;
        prof[s] = 0;
        
                
        while((l.size()!=0)&&(!trouve)){
            
            s = (int)l.poll();

            System.out.println("Je visite "+s);

            for(Edge e : g.adj(s)){
                
                if((e.from == s)&&(e.used < e.capacity)){
                    minf = min(minf, (e.capacity-e.used));
                    if(marque[e.to]!=1){ 
                        l.offer(e.to);
                        marque[e.to] = 1;
                        pere[e.to] = s;
                        prof[e.to] = prof[s]+1;
                        if(e.to == t){
                            trouve = true;
                            System.out.println("Je visite t");
                            System.out.println("J'ai trouvé un peu de place : "+minf);
                            System.out.println("Chemin : ");
                            chemin(0, t);
                            System.out.println(parcours.toString());
                            for(int p = 0 ; p < parcours.size()-1 ; p++){
                                flotsmin[parcours.get(p)][parcours.get(p+1)] = flotsmin[parcours.get(p)][parcours.get(p+1)] + minf;
                            }
                            g=gResiduel(g);
                            gResiduel(g).writeFile("residu.txt");
                            parcoursLargeur(g);
                            
                            System.out.println("Coupe : ");
                            for(Edge ed : gResiduel(g).edges()){
                                if((ed.used == ed.capacity)){
                                    coupe.push(ed.from);
                                }
                            }
                            for(int n = 0 ; n < itr.length ; n++){
                                System.out.println(coupe.pop());
                                imgv.remove((int)coupe.pop());
                            }
                            for ( int a = 0 ; a < img.length ; a++){
                                for ( int b = 0 ; b < img[0].length ; b++){
                                    res[a][b] = imgv.get((1+a)+(b*img[0].length));
                                }
                            } 
                            
                            
                        }
                    }
                }
                
            }
        }
        System.out.println("Rien trouvé");
        System.out.println("Coupe : ");
                            for(Edge ed : gResiduel(g).edges()){
                                if((ed.used == ed.capacity)){
                                    coupe.push(ed.from);
                                }
                            }
                            for(int n = 0 ; n < itr.length ; n++){
                                System.out.println(coupe.pop());
                                imgv.remove((int)coupe.pop());
                            }
                            for ( int a = 0 ; a < img.length ; a++){
                                for ( int b = 0 ; b < img[0].length ; b++){
                                    res[a][b] = imgv.get((1+a)+(b*img[0].length));
                                }
                            } 
                                
        
    }
    
    
    //permet de mettre à jour le flot max sur le chemin trouvé par le parcours en largeur
    public static void chemin(int src, int dest){

        parcours = new ArrayList<Integer>();
        
	if(src == dest){
		System.out.println(src);
                parcours.add(src);
        }
        else if((pere[dest] == NULL)&&(dest==1%itr.length)){
		System.out.println( "Il n'y a pas de chemin de " +src + " à " +dest);
        }
	else
	{
                
		chemin(src, pere[dest]);
                parcours.add(dest);
		System.out.println(" " + dest);
	}
    }
        

    public static void main(String[] args) {
        img = readpgm("ex2.pgm");
        imgv = new ArrayList<Integer>();
        for ( int i = 0 ; i < img.length ; i++){
            for ( int j = 0 ; j < img[0].length ; j++){
                imgv.add(img[i][j]); 
            }
        }
        System.out.println(interest(img));
        System.out.println("FLOTDEPART = "+flotDepart(tograph(interest(img)))+"\n");
        parcoursLargeur(gResiduel(tograph(interest(img))));
        writepgm(img, "resultat.pgm");
    }

}

